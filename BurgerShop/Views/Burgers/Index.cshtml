@using BurgerShop.Models.ViewModels.Burgers;
@model BurgerViewModel

@{
    ViewData["Title"] = "Burgers Page";
}

<div class="text-center">
    <h2 class="display-5">Бургеры</h2>
    <br />
</div>

<form>
    <div class="accordion" id="accordionExample">
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingOne">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#itemsales" aria-expanded="true" aria-controls="collapseOne">
                    Бургеры
                </button>
            </h2>
            <div id="itemsales" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
                <div class="accordion-body">
                    <p>
                        <a asp-action="Create" class="btn btn-outline-primary">Create New</a>
                    </p>
                    <div class="container">
                        <div class="row">
                            <div class="col-6">
                                <span class="mr-10">Строк на странице:</span>
                                <input class="mr-10 page-num" type="number" name="linesPerPage" asp-for="PaginatorViewModel.LinesPerPage" />
                                <input class="btn btn-outline-dark" type="submit" value="Изменить" />
                            </div>
                        </div>
                    </div>
                    <table class="table">
                        <tr>
                            <th>
                                Id Бургера
                            </th>
                            <th>
                                <a asp-action="Index"
                                   asp-route-sortOrder="@Model.SortViewModel.NameSort"
                                   asp-route-burgerName="@Model.FilterViewModel.BurgerName"
                                   asp-route-linesPerPage="@Model.PaginatorViewModel.LinesPerPage">Наименование</a>
                            </th>
                            <th>
                                <a asp-action="Index"
                                   asp-route-sortOrder="@Model.SortViewModel.SummSort"
                                   asp-route-burgerName="@Model.FilterViewModel.BurgerName"
                                   asp-route-linesPerPage="@Model.PaginatorViewModel.LinesPerPage">Цена</a>
                            </th>
                            <th>
                                <a asp-action="Index"
                                   asp-route-sortOrder="@Model.SortViewModel.TypeSort"
                                   asp-route-burgerName="@Model.FilterViewModel.BurgerName"
                                   asp-route-linesPerPage="@Model.PaginatorViewModel.LinesPerPage">Тип</a>
                            </th>
                            <th>
                                
                            </th>
                        </tr>
                        @foreach (var item in Model
                        .Burgers
                        )
                        {
                            <tr>
                                <td>@item.Id</td>
                                <td>@item.Name</td>
                                <td>@item.Price</td>
                                <td>@item.BurgerType</td>
                                <td>
                                    <a asp-action="Edit">Edit</a> | <a asp-action="Details">Details</a> | <a asp-action="Delete">Delete</a>
                                </td>
                            </tr>
                        }
                    </table>
                    <div class="input-group mb-3">
                        @{
                            if (Model.Burgers != null && Model.Burgers.Any())
                            {
                                int currentPage = Model.Burgers.FirstOrDefault().PageNumber;
                                int numOfPages = Model.Burgers.FirstOrDefault().NumberOfPages;

                                int minPaginatorPage = numOfPages == currentPage ? Math.Max(1, currentPage - 2) : Math.Max(1, currentPage - 1);
                                int maxPaginatorPage = currentPage == 1 ? Math.Min(currentPage + 2, numOfPages) : Math.Min(currentPage + 1, numOfPages);

                                for (int pageNumber = minPaginatorPage; pageNumber <= maxPaginatorPage; pageNumber++)
                                {
                                    if (pageNumber == currentPage)
                                    {
                                        <input class="btn btn-secondary" name="pageNumberForItemsGroup" type="submit" asp-for="PaginatorViewModel.PageNumber" value="@pageNumber" />
                                    }
                                    else
                                    {
                                        <input class="btn btn-outline-secondary" name="pageNumberForItemsGroup" type="submit" asp-for="PaginatorViewModel.PageNumber" value="@pageNumber" />
                                    }
                                }
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>